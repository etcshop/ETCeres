{% extends getPartial('page-design') %}
{% import "Ceres::PageDesign.Macros.LayoutContainer" as LayoutContainer %}
{% import "Ceres::PageDesign.Macros.ItemName" as ItemName %}
{{ component( "ETCeres::Item.Components.SingleItem" ) }}

{% block PartialHead %}

    {% set itemData = item.documents[0].data %}

    {% if queryString() | length > 0 %}
        {% set robotsValue = 'NOINDEX' %}
    {% else %}
        {% set robotsValue = 'ALL' %}
    {% endif %}
    {% embed getPartial('page-metadata') %}
        {% block title          ItemName.get(itemData | itemName(webstoreConfig.urlTitleItemName - 1), itemData.variation.bundleType) %}
        {% block description    itemData.texts.metaDescription %}
        {% block keywords       itemData.texts.keywords %}
        {% block image          itemData.images.all[0].url %}
        {% block robots         robotsValue %}
        {% block schemaOrg %}
            {
                "@context"      : "http://schema.org/",
                "@type"         : "Product",
                "@id"           : "{{ itemData.variation.id }}",
                "name"          : "{{ ItemName.get(itemData | itemName, itemData.variation.bundleType) | trim }}",
                "category"      : "{{ defaultCategory.details[0].name }}",
                "releaseDate"   : "{{ itemData.variation.releasedAt }}",
                "image"         : "{{ itemData.images.all[0].urlPreview }}",
                "identifier"    : "{{ itemData.variation.id }}",
                "description"   : "{{ itemData.texts.description | striptags | filterTabs }}",
                "disambiguatingDescription" : "{{ itemData.texts.shortDescription }}",
                "manufacturer"  : {
                    "@type"         : "Organization",
                    "name"          : "{{ itemData.item.manufacturer.externalName }}"
                },
                "offers": {
                    "@type"         : "Offer",
                    "priceCurrency" : "{{ itemData.prices.default.currency }}",
                    "price"         : "{{ itemData.prices.default.price.value | number_format(2, '.', '') }}",
                    "url"           : "{{ requestedVariationUrl }}",
{% if itemData.prices.default.baseLot > 0 %}
                    "priceSpecification": {
                        "@type": "UnitPriceSpecification",
                        "price": "{{ itemData.prices.default.price.value | number_format(2, '.', '') }}",
                        "priceCurrency": "{{ item.documents[0].data.prices.default.currency }}",
                        "referenceQuantity": {
                            "@type": "QuantitativeValue",
                            "value": "{{ itemData.unit.content }}",
                            "unitCode": "{{ itemData.unit.unitOfMeasurement }}"
                        }
                    },
{% endif %}
                    "availability"  : "{{ itemData.variation.availability.mappedAvailability }}",
                    "itemCondition" : "{{ itemData.item.condition.names.name }}",
                    "serialNumber"  : "{{ itemData.variation.number }}"
                },
                "depth": {
                    "@type"         : "QuantitativeValue",
                    "value"         : "{{ itemData.variation.lengthMM }}"
                },
                "width": {
                    "@type"         : "QuantitativeValue",
                    "value"         : "{{ itemData.variation.widthMM }}"
                },
                "height": {
                    "@type"         : "QuantitativeValue",
                    "value"         : "{{ itemData.variation.heightMM }}"
                },
                "weight": {
                    "@type"         : "QuantitativeValue",
                    "value"         : "{{ itemData.variation.weightG }}"
                }
            }
        {% endblock %}
    {% endembed %}
{% endblock %}

{% block PageBody %}
    {{ set_item_data_base(item.documents[0].data) }}

    {% set shopBuilderTemplate = "" %}
    {% set currentCategory = services.category.getCurrentCategory() %}

    {% if currentCategory is defined %}
        {% set shopBuilderTemplate = shop_builder_category_template(currentCategory.id, isItemSet ? "itemset" : "singleitem") %}
    {% endif %}
    <single-item
                 template-override="#vue-single-item"
                 v-cloak item-data="{{ item | json_data }}"
                 attributes-data="{{ attributes | json_data }}"
                 variations="{{ variations | json_data }}"
                 :after-key="{{ afterKey | json_encode }}"
                 :please-select-option-variation-id="{{ dynamicVariationId }}"
                 :show-net-prices="{{ services.customer.showNetPrices() | json_encode }}"
                 :is-wish-list-enabled="{{ services.url.isRouteEnabled("wish-list") | json_encode }}"
                 :init-please-select-option="{{ initPleaseSelectOption | json_encode }}"
                 :item-id="{{ item.documents[0].data.item.id }}"
                 v-slot="slotProps">
        {{ shopBuilderTemplate | raw }}
        <template #before-price>{{ LayoutContainer.show("Ceres::SingleItem.BeforePrice", item.documents[0].data) }}</template>
        <template #after-price>{{ LayoutContainer.show("Ceres::SingleItem.AfterPrice", item.documents[0].data) }}</template>
        <template #before-add-to-basket>{{ LayoutContainer.show("Ceres::SingleItem.BeforeAddToBasket", item.documents[0].data) }}</template>
        <template #after-add-to-basket>{{ LayoutContainer.show("Ceres::SingleItem.AfterAddToBasket", item.documents[0].data) }}</template>
        <template #additional-content-after-add-to-basket>{{ LayoutContainer.show("Ceres::SingleItem.AdditionalContentAfterAddToBasket", item.documents[0].data) }}</template>
        <template #additional-content-after-vat>{{ LayoutContainer.show("Ceres::SingleItem.AdditionalContentAfterVAT", item.documents[0].data) }}</template>
        <template #add-detail-tabs>{{ LayoutContainer.show("Ceres::SingleItem.AddDetailTabs", item.documents[0].data) }}</template>
        <template #add-detail-tabs-content>{{ LayoutContainer.show("Ceres::SingleItem.AddDetailTabsContent", item.documents[0].data) }}</template>
        <template #item-list-container>{{ LayoutContainer.show("Ceres::SingleItem.ItemListContainer", item) }}</template>
        <template #feedback-container>{{ LayoutContainer.show("Ceres::SingleItem.FeedbackContainer", item) }}</template>
        <template #image-carousel>
            {% set ImageCarouselOverride = LayoutContainer.show("Ceres::SingleItem.ImageCarousel") %}
            {% if ImageCarouselOverride|trim is empty %}
                <item-image-carousel plugin-path="{{ plugin_path('Ceres') }}" image-url-accessor="url"></item-image-carousel>
            {% else %}
                {{ ImageCarouselOverride }}
            {% endif %}
        </template>
        <template #tag-list>
            <tag-list :enabled-routes="{{ config('IO.routing.enabled_routes') | split(', ') | json_encode }}"></tag-list>
        </template>
    </single-item>
{% endblock %}
